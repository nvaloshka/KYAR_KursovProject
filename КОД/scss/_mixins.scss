// Function to get color from map
@function color($color-name) {
  @return map-get($colors, $color-name);
}

// Function to get breakpoint
@function breakpoint($bp-name) {
  @return map-get($breakpoints, $bp-name);
}

// Media query mixins
@mixin respond-to($breakpoint) {
  $bp-value: breakpoint($breakpoint);
  
  @media screen and (max-width: $bp-value) {
    @content;
  }
}

// Flexbox mixins
@mixin flex($direction: row, $justify: flex-start, $align: stretch, $wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
}

// Grid mixins
@mixin grid($columns: 1, $gap: 20px) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;
}

// Position mixins
@mixin position($position, $top: null, $right: null, $bottom: null, $left: null) {
  position: $position;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

@mixin fixed-full {
  @include position(fixed, 0, 0, 0, 0);
  width: 100%;
  height: 100%;
}

// Typography mixins
@mixin font-style($family: 'primary', $size: 16px, $weight: normal, $line-height: 1.5) {
  font-family: map-get($fonts, $family);
  font-size: $size;
  font-weight: $weight;
  line-height: $line-height;
}

// Container mixins
@mixin container($max-width: breakpoint('desktop')) {
  width: 100%;
  max-width: $max-width;
  margin-left: auto;
  margin-right: auto;
  padding-left: map-get($container-padding, 'desktop');
  padding-right: map-get($container-padding, 'desktop');

  @include respond-to('tablet') {
    padding-left: map-get($container-padding, 'tablet');
    padding-right: map-get($container-padding, 'tablet');
  }

  @include respond-to('mobile') {
    padding-left: map-get($container-padding, 'mobile');
    padding-right: map-get($container-padding, 'mobile');
  }
}

// Button mixins
@mixin button-base {
  display: inline-block;
  border: none;
  cursor: pointer;
  text-decoration: none;
  transition: all map-get($transition-speed, 'normal') ease;
}

// Image mixins
@mixin image-cover {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

// Aspect ratio mixin
@mixin aspect-ratio($width: 1, $height: 1) {
  position: relative;
  &::before {
    content: '';
    display: block;
    padding-top: ($height / $width) * 100%;
  }
}

// Card mixins
@mixin card($padding: 20px, $radius: 'medium', $bg-color: 'white', $opacity: 'light') {
  padding: $padding;
  border-radius: map-get($border-radius, $radius);
  background-color: rgba(color($bg-color), map-get($opacity-levels, $opacity));
}

// Header mixins
@mixin header-base {
  @include position(fixed, 0, 0, null, 0);
  width: 100%;
  max-width: 100vw;
  height: $header-height;
  background-color: color('main');
  z-index: map-get($z-layers, 'header');
}

// Animation mixins
@mixin keyframes($name) {
  @keyframes #{$name} {
    @content;
  }
}

@mixin animate($name, $duration: 'normal', $timing: ease) {
  animation: $name map-get($transition-speed, $duration) $timing;
}

// Hover effect mixins
@mixin hover-lift($amount: -5px) {
  transition: transform map-get($transition-speed, 'normal') ease;
  &:hover {
    transform: translateY($amount);
  }
}

// Shadow mixins
@mixin shadow($level: 1) {
  @if $level == 1 {
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  } @else if $level == 2 {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
  } @else if $level == 3 {
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
  }
} 